{"version":3,"sources":["Components/Commands/index.js","Components/Commands/play.js","Components/Commands/list.js","Components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Commands","Play","props","action","song","react_default","a","createElement","name","List","songs","map","key","index","Main","state","_this2","this","axios","concat","then","res","data","console","log","setState","Action","Component","App","className","Main_Main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAEeA,EAAA,CACbC,KCDa,SAAAC,GAAS,IACdC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,KAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACLE,EAAAC,EAAAC,cAAA,kBAAUH,EAAKI,QDHnBC,KEFa,SAAAP,GAAS,IACdC,EAAkBD,EAAlBC,OAAQO,EAAUR,EAAVQ,MAChB,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKJ,GACJO,EAAMC,IAAI,SAAAP,GAAI,OACbC,EAAAC,EAAAC,cAAA,MAAIK,IAAKR,EAAKS,OACXT,EAAKS,MADR,IACgBT,EAAKI,WCHRM,6MACnBC,MAAQ,sFACY,IAAAC,EAAAC,KAClBC,IAAK,GAAAC,OALO,4BAKP,SACFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,OAChBF,KAAK,SAAAE,GACJC,QAAQC,IAAI,kBAAmB,CAAEF,SACjCN,EAAKS,SAAS,CAAEH,4CAGb,IACCA,EAASL,KAAKF,MAAdO,KAER,GADAC,QAAQC,IAAI,SAAU,CAAEF,SACpBA,EAAM,CACR,IAAMI,EAAS1B,EAASsB,EAAKnB,QAC7B,OACEE,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmB,EAAWJ,IAIlB,OACEjB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,8CAvB0BoB,aCMnBC,MARf,WACE,OACEvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,OACbxB,EAAAC,EAAAC,cAACuB,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMvB,KAAK,SAAAwB,GACjCA,EAAaC","file":"static/js/main.e501afbe.chunk.js","sourcesContent":["import Play from './play';\r\nimport List from './list';\r\nexport default {\r\n  Play,\r\n  List\r\n};\r\n","import React from 'react';\r\n\r\nexport default props => {\r\n  const { action, song } = props;\r\n  return (\r\n    <div>\r\n      <h1>{action}</h1>\r\n      <h3>Song {song.name}</h3>\r\n    </div>\r\n  );\r\n};\r\n","import React from 'react';\r\n\r\nexport default props => {\r\n  const { action, songs } = props;\r\n  return (\r\n    <div>\r\n      <h1>{action}</h1>\r\n      {songs.map(song => (\r\n        <h3 key={song.index}>\r\n          {song.index}.{song.name}\r\n        </h3>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport Commands from '../Commands';\r\n\r\nconst API_URL = 'http://localhost:9090/api';\r\n\r\nexport default class Main extends Component {\r\n  state = {};\r\n  componentDidMount() {\r\n    axios(`${API_URL}/now`)\r\n      .then(res => res.data)\r\n      .then(data => {\r\n        console.log('@debug-call-now', { data });\r\n        this.setState({ data });\r\n      });\r\n  }\r\n  render() {\r\n    const { data } = this.state;\r\n    console.log('@debug', { data });\r\n    if (data) {\r\n      const Action = Commands[data.action];\r\n      return (\r\n        <div>\r\n          <Action {...data} />\r\n        </div>\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <h1>Waiting Your Commands...</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport Main from './Components/Main';\n\nfunction App() {\n  return (\n    <div className='App'>\n      <Main />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}